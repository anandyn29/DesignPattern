
Builder design pattern builds a complex object using many simple objects and a step-by-step approach.
The Process of constructing the complex object should be so generic that the same construction process can be used to create different representations of the same complex object.

Actors :
1. Product  --> HolidayPackage.cs
2. Abstract Builder --> AbstractHolidayPackageBuilder.cs
3. Concreate Builder --> HolidayPackageBuilder.cs
4. Director --> TravelAgent.cs
5. Client --> Program.cs

Advantages of Builder Design Pattern :
The Builder Design Pattern offers several advantages in C# programming, especially when dealing with constructing complex objects. Some of the key benefits include:

1. Separation of Construction and Representation: The Builder pattern separates the construction process of an object from its representation,
	allowing the same construction process to create different representations.This separation enhances the modularity of the code.
2. Encapsulation of Complex Creation Logic: The pattern encapsulates complex object creation logic within the builder,
	making the client code cleaner and simpler. This is particularly useful when creating objects with numerous initialization parameters, some of which may be optional.
3. Improved Readability and Maintainability: Using the Builder pattern, you can avoid telescoping constructor anti-patterns (where a constructor may have many parameters, 
	not all of which are always needed). This improves code readability and maintainability.
4. Immutability of Objects: The Builder pattern can be used to build immutable objects (objects whose state cannot change after they are constructed).
	Immutable objects are simpler to understand and work with and are also thread-safe.
5. Control Over Object Construction Process: The pattern provides more control over the construction process than direct instantiation. 
	It allows building an object step-by-step, and the product is only returned when it’s entirely ready.
