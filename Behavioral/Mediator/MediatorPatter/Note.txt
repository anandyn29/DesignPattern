The Mediator Design Pattern restricts direct communications between the objects and forces them to collaborate only via a mediator object.
This pattern is used to centralize complex communications and control between related objects in a system.
The Mediator object acts as the communication center for all objects.
That means when an object needs to communicate with another object, it does not call the other object directly. Instead, it calls the mediator object, and it is the responsibility of the mediator object to route the message to the destination object.

Actors:
1. Mediator   --> IControlTower.cs
2. ConcretetMediator   --> ControlTower.cs, 
3. Colleague --> Airplane.cs, Runway.cs
4. Client  --> Program.cs

Advantages of Mediator Design Pattern:
1. Reduced Complexity: It centralizes complex communications and controls logic between objects in a system.
2. Decoupled Objects: Colleague objects are less coupled to each other, which increases maintainability and reusability.
3. Simplified Object Protocols: Objects no longer communicate directly with each other but instead through a mediator, simplifying their interaction protocols.
4. Centralized Control: The mediator encapsulates the logic for how objects interact, making it easier to change the logic independently of the colleague classes.