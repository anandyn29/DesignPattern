
Fluent Interface Design Pattern(Chain of resoponsibility) is based on the concepts of method chaining, where each method returns an object itself, 
allowing multiple actions to be invoked in a single statement sequence. It is useful for creating an API where the code reads like a series of natural language statements,
enhancing readability and ease of use.

Actors :
1. Product  --> .cs
2. Fluent Builder --> FluentBuilder.cs
3. Client --> Program.cs

The Fluent Interface Design Pattern is beneficial in the following scenarios:

1. Configure Complex Objects: When an object requires multiple optional and mandatory configurations, a fluent interface simplifies the process, making it clear and straightforward.
2. Build SQL-like Queries: Fluent interfaces are ideal for designing APIs for building complex queries or operations, similar to how LINQ works in C#.
   This allows for constructing queries in a way that is both expressive and easy to modify.
