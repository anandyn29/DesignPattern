
Prototype Design Pattern gives us a way to create new or cloned objects from the existing object of a class.
That means it clones the existing object with its data into a new object.

Actors :
1. ProtoType  --> Employee.cs
2. Concreate ProtoType --> PermanentEmployee.cs, TemporaryEmployee.cs
3. Client --> Program.cs

Advantages of Builder Design Pattern :
The Prototype Design Pattern offers several advantages in C# programming, especially when dealing with constructing complex objects. Some of the key benefits include:

1. High-Cost Initialization: If initializing an object is resource-intensive, possibly because it requires complex computation, database operations, or reading from external files,
   using a prototype can be beneficial. Once the initial object is created, subsequent objects can be cloned, significantly reducing the cost of creating each new instance.
2. Object Pooling: Real-time systems often use object pools (pre-instantiated objects ready to be reused) to manage resources efficiently, especially in high-load scenarios.
   The Prototype pattern can facilitate the management of such pools, allowing for the resetting and reusing of objects by cloning a clean prototype instead of recreating objects from scratch.
