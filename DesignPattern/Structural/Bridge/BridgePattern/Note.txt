
Bridge Design Pattern Decouples an abstraction from its implementation so that the two can vary independently. 
This pattern involves an interface that acts as a bridge between the abstraction class and implementer classes.
It is useful in scenarios where an abstraction can have several implementations, and you want to separate the implementation details from the abstraction.

Actors :
1. Implementer --> IMessageSender.cs  
2. ConcreteImplementer --> EmailMessageSender.cs, SmsMessageSender.cs
3. Abstraction --> AbstractMessage.cs
4. ConcreteAbstration --> LongMessage.cs, ShortMessage.cs
5. Client --> Program.cs

When to use:
1. Abstraction and Implementation Can Vary Independently: When you want to decouple an abstraction from its implementation so that the two can vary independently. 
	This is useful in cases where, for instance, the core functionality and the platform-specific details need to be developed and extended separately.
2. Changing Implementation at Runtime: If your application needs to switch between different implementations at runtime.
	The Bridge pattern allows you to change the implementation dynamically without altering the abstraction.