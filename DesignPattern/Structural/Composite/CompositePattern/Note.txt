Composite Design Pattern composes the objects in the form of a tree structure to represent part as well as a whole hierarchy. 
Using this Design Pattern, we can access the operations of an individual object as well as we can access the same operations on a composite object in the same manner. 
That means the client can access the individual objects or the composition of objects in a uniform manner.

Actors :
1. ComponentInterface --> IFileSystemComponent.cs  
2. Composite --> DirectoryComponent.cs
3. Leaf --> FileLeaf.cs
4. Client --> Program.cs

Advantages of Decorator Design Pattern:
1. Hierarchical Tree Structures: When you need to represent a part-whole hierarchy. 
	The pattern is ideal for situations where you are dealing with a tree structure with individual objects and compositions of objects treated uniformly.
2. Treating Individual and Composite Objects Uniformly: If you want to treat both individual objects and their compositions in the same way.
	This is useful when you want to ignore the difference between compositions of objects and individual objects.ctionality Layering: Allows for the layering of functionalities. Each decorator adds its behavior before and/or after delegating the task to the base component.