Flyweight Design Pattern is used when there is a need to create many objects of almost similar nature. 
A large number of objects means it consumes a large amount of memory, and the Flyweight Design Pattern provides a solution for reducing the load on memory by sharing objects.

In Flyweight Design Pattern, there are two states, i.e., Intrinsic and Extrinsic.
1. Intrinsic states are things that are Constants and Stored in Memory. On the other hand, 
2. Extrinsic states are things that are not constant and need to be calculated on the Fly; hence, they can not be stored in memory.

Actors :
1. InterfaceFlyweight --> IShape.cs  
2. ConcreteFlyweight --> Product.cs, Invoice.cs, Payment.cs
3. FlyweightFactory --> ShapeFactory.cs
4.  Client --> Program.cs

Advantages of Flyweight Design Pattern:
1. Reduced Memory Footprint: Significantly reduces memory usage when dealing with large numbers of similar objects.
2. Improved Performance: This can improve performance in systems where object instantiation and garbage collection are bottlenecks